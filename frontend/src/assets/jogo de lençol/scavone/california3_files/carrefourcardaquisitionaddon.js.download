ACC.CardAquisition = {
    _autoload: [
        "init"
    ],

    cameraTrack: null,

    init: function() {
        ACC.CardAquisition.startCardsCarousel();
        ACC.CardAquisition.configsDefaultValidate();
        ACC.CardAquisition.customSelect();
    },

    startCardsCarousel: function() {
        $('.card-slick-card-carousel').slick({
            dots: false,
            infinite: false,
            speed: 300,
            slidesToShow: 4,
            slidesToScroll: 1,
            arrows: false,
            responsive: [{
                breakpoint: 1024,
                settings: {
                    slidesToShow: 3,
                    dots: true
                }
            },{
                breakpoint: 800,
                settings: {
                    slidesToShow: 2,
                    dots: true
                }
            },{
                breakpoint: 480,
                settings: {
                    slidesToShow: 1,
                    dots: true
                }
            }]
        });
    },

    configsDefaultValidate: function() {
        $('#carrefour-card .c-form--2 .form-group input,#carrefour-card .c-form--2 .form-group select').focus(function(){
            $(this).closest('.form-group').addClass('is-hover');
        });
        $('#carrefour-card .c-form--2 .form-group input, #carrefour-card .c-form--2 .form-group select').focusout(function(){
            if ($(this).val().length < 1) {
                $(this).closest('.form-group').removeClass('is-hover');
            }
        });

        $.validator.setDefaults({
            ignore: [],
            highlight: function (element) {
                $(element).parent().addClass('has-error');
                // $(element).closest('.form-group').addClass('has-error');
            },
            unhighlight: function (element) {
                $(element).parent().removeClass('has-error');
                // $(element).closest('.form-group').removeClass('has-error');
            },
            errorElement: 'span',
            errorClass: 'label-error',
            validClass: 'success',
            success: function (label, element) {
                $(element).parent().removeClass('is-valid');
                // $(element).closest('.form-group').addClass('is-valid');
            },
            errorPlacement: function (error, element) {
                // console.log(error, element)
                error.insertAfter(element);
            }
        });

        $.extend($.validator.messages, {
            required: "Campo obrigatório.",
            remote: "Please fix this field.",
            email: "Digite um e-mail válido.",
            url: "Please enter a valid URL.",
            date: "Please enter a valid date.",
            dateISO: "Please enter a valid date (ISO).",
            number: "Please enter a valid number.",
            digits: "Please enter only digits.",
            creditcard: "Please enter a valid credit card number.",
            equalTo: "Please enter the same value again.",
            accept: "Please enter a value with a valid extension.",
            maxlength: $.validator.format("Please enter no more than {0} characters."),
            minlength: $.validator.format("Please enter at least {0} characters."),
            rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
            range: $.validator.format("Please enter a value between {0} and {1}."),
            max: $.validator.format("Please enter a value less than or equal to {0}."),
            min: $.validator.format("Please enter a value greater than or equal to {0}.")
        });

        /**
         * * Inputs mask
         */
        $('.mask-cpf').mask('000.000.000-00', {clearIfNotMatch: true});
        $('.mask-cnpj').mask('00.000.000/0000-00', {clearIfNotMatch: true});
        $('.mask-phone').mask('(00) 00000-0000', {clearIfNotMatch: true});
        $('.cep').mask('00000-000', {clearIfNotMatch: true});

        $(".input-cpfcnpj").keydown(function () {
            try {
                $(".input-cpfcnpj").unmask();
            } catch (e) { }

            let tamanho = $(".input-cpfcnpj").val().length;

            if (tamanho < 11) {
                $(".input-cpfcnpj").mask("999.999.999-99", {clearIfNotMatch: true});
            } else {
                $(".input-cpfcnpj").mask("99.999.999/9999-99", {clearIfNotMatch: true});
            }

            let elem = this;
            setTimeout(function () {
                elem.selectionStart = elem.selectionEnd = 10000;
            }, 0);

            let currentValue = $(this).val();
            $(this).val('');
            $(this).val(currentValue);
        });
    },

    customSelect: function() {
        let x, i, j, selElmnt, a, b, c;
        /* Look for any elements with the class "custom-select": */
        x = document.getElementsByClassName("custom-select");
        for (i = 0; i < x.length; i++) {
            selElmnt = x[i].getElementsByTagName("select")[0];
            /* For each element, create a new DIV that will act as the selected item: */
            a = document.createElement("DIV");
            a.setAttribute("class", "select-selected");
            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
            x[i].appendChild(a);
            /* For each element, create a new DIV that will contain the option list: */
            b = document.createElement("DIV");
            b.setAttribute("class", "select-items select-hide");
            for (j = 1; j < selElmnt.length; j++) {
                /* For each option in the original select element,
                create a new DIV that will act as an option item: */
                c = document.createElement("DIV");
                c.innerHTML = selElmnt.options[j].innerHTML;
                c.setAttribute("data-value", selElmnt.options[j].getAttribute("value"));
                c.addEventListener("click", function(e) {
                    /* When an item is clicked, update the original select box,
                    and the selected item: */
                    let y, i, k, s, h;
                    s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                    h = this.parentNode.previousSibling;
                    for (i = 0; i < s.length; i++) {
                        if (s.options[i].innerHTML == this.innerHTML) {
                            s.selectedIndex = i;
                            h.innerHTML = this.innerHTML;
                            y = this.parentNode.getElementsByClassName("same-as-selected");
                            for (k = 0; k < y.length; k++) {
                                y[k].removeAttribute("class");
                            }
                            this.setAttribute("class", "same-as-selected");
                            break;
                        }
                    }
                    h.click();
                });
                b.appendChild(c);
            }
            x[i].appendChild(b);
            a.addEventListener("click", function(e) {
                /* When the select box is clicked, close any other select boxes,
                and open/close the current select box: */
                e.stopPropagation();
                closeAllSelect(this);
                this.nextSibling.classList.toggle("select-hide");
                this.classList.toggle("select-arrow-active");
            });
        }

        function closeAllSelect(elmnt) {
            /* A function that will close all select boxes in the document,
            except the current select box: */
            let x, y, i, arrNo = [];
            x = document.getElementsByClassName("select-items");
            y = document.getElementsByClassName("select-selected");
            for (i = 0; i < y.length; i++) {
                if (elmnt == y[i]) {
                    arrNo.push(i)
                } else {
                    y[i].classList.remove("select-arrow-active");
                }
            }
            for (i = 0; i < x.length; i++) {
                if (arrNo.indexOf(i)) {
                    x[i].classList.add("select-hide");
                }
            }
        }

        /* If the user clicks anywhere outside the select box,
        then close all select boxes: */
        document.addEventListener("click", closeAllSelect);
    },

    getFormData: function($form){
        let unindexed_array = $form.serializeArray();
        let indexed_array = {};

        $.map(unindexed_array, function (n, i) {
            if (n['name'] !== 'CSRFToken') {
                indexed_array[n['name']] = n['value'];
            }
        });

        return indexed_array;
    },

    setValueToCustomSelect: function ($elem, $value) {
        let _selectItems = $elem.siblings('.select-items');
        $(`[data-value="${$value}"]`, _selectItems).trigger('click');
    }
};
